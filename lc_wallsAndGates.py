
	
import collections
class Solution(object):
	def wallsAndGates(self, rooms):
		if not rooms: return rooms
		m, n = len(rooms), len(rooms[0])

		q = collections.deque()

		for i in range(m):
			for j in range(n):
				if rooms[i][j] == 0: q.append((i,j))
		visted = set()
		while (q):
			x, y = q.popleft()

			for dx, dy  in [[0,1],[1,0],[-1,0],[0,-1]]:	
				r, c = x + dx, y + dy
				# print(rooms[r][c])
				if  r < 0  or  r >= m or  c <0 or c >= n or rooms[r][c]!= 2147483647: continue # rooms[r][c] in [0,-1] or (r,c) in visted : continue
				rooms[r][c] = rooms[x][y]+1
				# rooms[r][c] = rooms[x][y]+1
				# visted.add((r,c))
				q.append((r,c))
		return rooms

rooms = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]#[[-1,0,2147483647,2147483647,0,0,2147483647,2147483647,-1,0,0,-1,-1,2147483647,-1,-1,2147483647,2147483647,2147483647,0,0,-1,2147483647,-1,-1,-1,0,2147483647,0,0,0,-1,2147483647,0,0,2147483647,-1,-1,0,0,-1,0,2147483647,2147483647,-1,2147483647],[0,-1,0,-1,0,0,0,-1,-1,0,-1,2147483647,2147483647,-1,2147483647,-1,2147483647,-1,-1,2147483647,0,-1,2147483647,0,2147483647,0,-1,2147483647,0,-1,-1,2147483647,0,2147483647,0,2147483647,-1,2147483647,2147483647,2147483647,-1,0,-1,2147483647,0,2147483647],[2147483647,-1,-1,2147483647,0,0,0,2147483647,-1,0,-1,-1,2147483647,2147483647,2147483647,2147483647,-1,2147483647,0,0,2147483647,0,-1,0,0,2147483647,2147483647,0,0,2147483647,-1,-1,0,2147483647,0,2147483647,-1,-1,2147483647,2147483647,0,-1,2147483647,-1,-1,-1],[2147483647,-1,-1,2147483647,0,-1,-1,-1,-1,-1,0,-1,-1,2147483647,0,-1,-1,-1,2147483647,2147483647,-1,2147483647,-1,-1,-1,0,-1,-1,0,-1,0,-1,2147483647,2147483647,2147483647,2147483647,2147483647,0,0,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647],[2147483647,2147483647,2147483647,-1,-1,2147483647,2147483647,-1,0,2147483647,-1,0,0,2147483647,2147483647,0,2147483647,-1,-1,2147483647,0,0,0,-1,2147483647,0,2147483647,-1,2147483647,0,0,-1,0,2147483647,-1,0,-1,-1,2147483647,-1,0,0,-1,-1,-1,-1],[-1,-1,2147483647,2147483647,0,2147483647,0,0,2147483647,2147483647,0,-1,0,2147483647,-1,2147483647,2147483647,0,2147483647,2147483647,-1,0,0,2147483647,-1,-1,0,-1,2147483647,0,0,0,0,0,2147483647,0,0,-1,0,0,-1,0,-1,0,0,-1]]
print(Solution().wallsAndGates(rooms))
